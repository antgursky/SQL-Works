--Home WORK 7

--1. (1 балл) Загрузите данные из файла “/data/fraud.csv.zip” в БД.
----Таблицу назовите “fraud_data”;

--Загрузил таблицу через импорт данных 

--Переименуем таблицу
ALTER TABLE user_26.fraud RENAME TO fraud_data;

--------------------------------------------------------------------------------
--2. (1 балл) Задайте первичный ключ у созданной таблицы. 
--Напишите sql-запрос на создание первичного ключа;

ALTER TABLE user_26.fraud_data
ADD CONSTRAINT fraud_data_pkey PRIMARY KEY (column1);

--у таблицы fraud_data добавлен первичный ключ по колонке column1.
--------------------------------------------------------------------------------

--3. (2 балла) Подумайте, каким образом можно дополнить таблицу:
--добавить ограничения, изменить тип данных некоторых полей, удалить
--незначащие поля и т.п. Напишите в ячейке эти sql-запросы и почему их
--сделали;

-- Установим ограничения NOT NULL для значимых полей
ALTER TABLE user_26.fraud_data 
ALTER COLUMN cc_num SET NOT NULL, 
ALTER COLUMN amt SET NOT NULL, 
ALTER COLUMN trans_date_trans_time SET NOT NULL, 
ALTER COLUMN trans_num SET NOT NULL;  

--id и column1 являются дубликатами/необходимыми, их можно удалить:
ALTER TABLE user_26.fraud_data 
DROP COLUMN column1;  -- Удаление ненужного поля Column1

 -- Преобразование varchar в DATE
ALTER TABLE user_26.fraud_data 
ALTER COLUMN dob TYPE DATE USING to_date(dob, 'YYYY-MM-DD'); 

-- вывод: 
--я добавил ограничения NOT NULL для ключевых полей, удалил лишнюю колонку и привёл дату рождения к типу DATE — 
--это сделало таблицу чище и удобнее для анализа.
--------------------------------------------------------------------------------

--4. (3 балла) На основе данных создайте представление, в котором
--содержится следующая информация:
--a. Наименование продавца (merchant);
--b. Кол-во транзакций с участием данного продавца;
--c. Кол-во мошеннических транзакций с участием данного продавца;
--d. Доля мошеннических транзакций от общего кол-ва для данного
--продавца;
--e. Сумма всех транзакций с участием данного продавца (amt);
--f. Сумма мошеннических транзакций данного продавца;
--g. Доля суммы мошеннических транзакций от общей суммы всех
--транзакций для данного продавца.

CREATE VIEW user_26.merchant_statistics AS
SELECT 
    merchant,
    COUNT(*) AS transaction_count,  -- Количество транзакций с участием данного продавца
    SUM(CASE WHEN is_fraud = 1 THEN 1 ELSE 0 END) AS fraudulent_transaction_count,  -- Количество мошеннических транзакций
    SUM(CASE WHEN is_fraud = 1 THEN 1 ELSE 0 END) * 1.0 / COUNT(*) AS fraud_percentage,  -- Доля мошеннических транзакций
    SUM(amt) AS total_amount,  -- Сумма всех транзакций
    SUM(CASE WHEN is_fraud = 1 THEN amt ELSE 0 END) AS total_fraudulent_amount,  -- Сумма мошеннических транзакций
    SUM(CASE WHEN is_fraud = 1 THEN amt ELSE 0 END) * 1.0 / SUM(amt) AS fraud_amount_percentage  -- Доля суммы мошеннических транзакций
FROM 
    user_26.fraud_data
GROUP BY 
    merchant;

--Вызовем представление:
SELECT * FROM user_26.merchant_statistics;

-- вывод: 
--это представление позволяет быстро оценить уровень риска по каждому продавцу — видно,
-- сколько у него транзакций, какая доля мошеннических и в денежном выражении.
--------------------------------------------------------------------------------


--5. (3 балла) На основе данных создайте представление, в котором
--содержится следующая информация:
--a. Наименование продавца;
--b. Имя и фамилия покупателя, который произвел мошенническую
--операцию;
--c. Общее кол-во мошеннических транзакций для уникальной пары
--продавец-покупатель;
--d. Сумма мошеннических транзакций для уникальных пар продавец-
--покупатель;
--Данные отсортируйте сначала по сумме мошеннических транзакций в
--обратном порядке, затем по кол-ву мошеннических операций в обратном
--порядке.


CREATE VIEW user_26.fraud_transactions AS
SELECT merchant,   -- Наименование продавца
       "first",    -- Имя покупателя
       "last",     -- Фамилия покупателя
       COUNT(*) AS fraudulent_transaction_count,  -- Общее количество мошеннических транзакций
       SUM(amt) AS total_fraudulent_amount     -- Сумма мошеннических транзакций
 FROM user_26.fraud_data
WHERE is_fraud = 1 -- Оставляем только мошеннические транзакции
GROUP BY 
      merchant,"first", "last" --Группируем по по продавцу, имени, фамилии
ORDER BY 
      total_fraudulent_amount DESC,    -- Сортировка по сумме мошеннических транзакций
      fraudulent_transaction_count DESC;  -- Сортировка по количеству мошеннических операций

--Вызовем представление:
SELECT * FROM user_26.fraud_transactions;

--Это представление показывает топ-пар «продавец-покупатель», где фиксировались мошеннические операции, 
--с сортировкой по объёму ущерба и числу случаев.